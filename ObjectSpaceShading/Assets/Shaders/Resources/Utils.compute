#pragma use_dxc
#pragma kernel ClearRawBufferData
#pragma kernel ClearRawBufferDataToMaxUInt
#pragma kernel CopyRawBufferData

RWByteAddressBuffer _Buffer;

[numthreads(256, 1, 1)]
void ClearRawBufferData(uint3 groupId : SV_GroupID, uint3 groupThreadId : SV_GroupThreadID)
{
    uint length;
    _Buffer.GetDimensions(length);

    const uint start = groupId.x * 256 * 32 * 4 + groupThreadId.x * 4;
    const uint end = min(start + 256 * 32 * 4, length);

    for (uint address = start; address < end; address += 256 * 4)
    {
        _Buffer.Store(address, 0);
    }
}

[numthreads(256, 1, 1)]
void ClearRawBufferDataToMaxUInt(uint3 groupId: SV_GroupID, uint3 groupThreadId: SV_GroupThreadID)
{
    uint length;
    _Buffer.GetDimensions(length);

    const uint start = groupId.x * 256 * 32 * 4 + groupThreadId.x * 4;
    const uint end = min(start + 256 * 32 * 4, length);

    for (uint address = start; address < end; address += 256 * 4)
    {
        _Buffer.Store(address, ~0);
    }
}

ByteAddressBuffer _SrcBuffer;
int _SrcOffsetInBytes;
int _SrcLengthInBytes;

RWByteAddressBuffer _DstBuffer;
int _DstOffsetInBytes;

[numthreads(64, 1, 1)]
void CopyRawBufferData(uint3 groupId : SV_GroupID, uint3 groupThreadId : SV_GroupThreadID)
{
    uint dstLength;
    _DstBuffer.GetDimensions(dstLength);

    uint start = groupId.x * 64 * 16 * 4 + groupThreadId.x * 4;
    uint end = start + 64 * 16 * 4;

    int lengthInBytes = min(_SrcLengthInBytes, max((int) dstLength - _DstOffsetInBytes, 0));
    end = min(end, lengthInBytes);

    for (uint address = start; address < end; address += 64 * 4)
    {
        uint v = _SrcBuffer.Load(_SrcOffsetInBytes + address);
        _DstBuffer.Store(_DstOffsetInBytes + address, v);
    }
}
